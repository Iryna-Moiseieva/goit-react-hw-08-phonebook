{"version":3,"file":"static/js/402.62bdaefa.chunk.js","mappings":"yTAGaA,EAAOC,EAAAA,GAAAA,KAAH,gPAYJC,EAAQD,EAAAA,GAAAA,MAAH,0IAOLE,EAAYF,EAAAA,GAAAA,MAAAA,OAAmB,iBAAO,CACjDG,KAAM,OACNC,KAAM,OACNC,aAAc,MACdC,UAAU,EACVC,QAAQ,yHACRC,MAAM,yIANoC,GAAnBR,CAAH,ojBA+BTS,EAAcT,EAAAA,GAAAA,MAAAA,OAAmB,iBAAO,CACnDG,KAAM,MACNC,KAAM,SACNC,aAAc,MACdC,UAAU,EACVC,QAAQ,yFACRC,MAAM,+FANsC,GAAnBR,CAAH,kjBA8BXU,GAAeV,EAAAA,EAAAA,IAAOW,EAAAA,GAAQC,OAAM,iBAAO,CACtDT,KAAM,SADyC,GAArBH,CAAH,yD,yGCjFZa,EAAab,EAAAA,GAAAA,MAAAA,OAAmB,iBAAO,CAClDG,KAAM,QACNC,KAAM,QACNC,aAAc,MACdC,UAAU,EACVE,MAAM,wBALqC,GAAnBR,CAAH,ojBA8BVc,EAAgBd,EAAAA,GAAAA,MAAAA,OAAmB,iBAAO,CACrDG,KAAM,WACNC,KAAM,WACNC,aAAc,MACdC,UAAU,EAJoC,GAAnBN,CAAH,ijB,kFC9Bbe,EAAgBf,EAAAA,GAAAA,QAAH,2GAObgB,EAAQhB,EAAAA,GAAAA,GAAH,mH,UCNH,SAASiB,EAAT,GAAuC,IAApBT,EAAmB,EAAnBA,MAAOU,EAAY,EAAZA,SACvC,OACE,UAACH,EAAD,WACGP,IAAS,SAACQ,EAAD,UAAQR,IACjBU,IAGN,C,wJCQc,SAASC,IACtB,IAAMC,GAAWC,EAAAA,EAAAA,MAgBjB,OACE,+BACE,SAACC,EAAA,EAAD,WACA,SAACL,EAAA,EAAD,CAAST,MAAM,eAAf,UAEF,UAAC,KAAD,CAAOe,SAnBY,SAAAC,GACnBA,EAAEC,iBACF,IAAMC,EAAOF,EAAEG,cACfP,GACEQ,EAAAA,EAAAA,IAAS,CACPxB,KAAMsB,EAAKG,SAASzB,KAAK0B,MACzBC,MAAOL,EAAKG,SAASE,MAAMD,MAC3BE,SAAUN,EAAKG,SAASG,SAASF,SAGrCG,EAAAA,GAAAA,QAAc,2BACdP,EAAKQ,OACN,EAOgC7B,aAAa,MAA5C,WACE,UAAC,KAAD,uBACE,SAAC,KAAD,QAEF,UAAC,KAAD,oBACE,SAAC,IAAD,QAEF,UAAC,KAAD,uBACE,SAAC,IAAD,QAEA,SAAC,KAAD,CAAc8B,KAAK,qBAM1B,CCtDc,SAASC,IACtB,OACE,0BACE,SAACjB,EAAD,KAGL,C","sources":["components/ContactForm/ContactForm.styles.js","components/RegisterForm/RegisterForm.styles.js","components/Section/Section.styles.js","components/Section/Section.js","components/RegisterForm/RegisterForm.js","pages/RegisterPage/RegisterPage.js"],"sourcesContent":["import styled from 'styled-components';\nimport Button from '../Button';\n\nexport const Form = styled.form`\n  width: 450px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  border: 1px solid black;\n  margin: auto;\n  padding: 15px;\n  border-radius: 8px;\n  border-color: var(--color-blue-300);\n`;\n\nexport const Label = styled.label`\n  margin-bottom: 15px;\n  font-weight: 600;\n  font-size: var(--font-size-500);\n  color: var(--color-blue-200);\n`;\n\nexport const InputName = styled.input.attrs(() => ({\n  type: 'text',\n  name: 'name',\n  autoComplete: 'off',\n  required: true,\n  pattern: `^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$`,\n  title: `Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan`,\n}))`\n  display: block;\n  margin-top: 5px;\n  border: 2px solid var(--color-gray-200);\n  border-radius: 4px;\n  box-shadow: 0px 4px 4px 0px var(--color-gray-100);\n  background-color: inherit;\n\n  &::placeholder {\n    font-family: inherit;\n    font-size: var(--font-size-500);\n    color: var(--color-white);\n  }\n  &:hover,\n  &:focus {\n    outline: none;\n    border-color: var(--color-blue-200);\n    transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  &:not(:placeholder-shown) {\n    color: var(--color-white);\n  }\n`;\n\nexport const InputNumber = styled.input.attrs(() => ({\n  type: 'tel',\n  name: 'number',\n  autoComplete: 'off',\n  required: true,\n  pattern: `\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}`,\n  title: `Phone number must be digits and can contain spaces, dashes, parentheses and can start with +`,\n}))`\n  display: block;\n  margin-top: 5px;\n  border: 2px solid var(--color-gray-200);\n  border-radius: 4px;\n  box-shadow: 0px 4px 4px 0px var(--color-gray-100);\n  background-color: inherit;\n  &::placeholder {\n    font-family: inherit;\n    font-size: var(--font-size-500);\n    color: var(--color-white);\n  }\n  &:hover,\n  &:focus {\n    outline: none;\n    border-color: var(--color-blue-200);\n    transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  &:not(:placeholder-shown) {\n    color: var(--color-white);\n  }\n`;\n\nexport const ButtonSubmit = styled(Button).attrs(() => ({\n  type: 'submit',\n}))`\nfont-size: var(--font-size-400);\n`;\n","import styled from 'styled-components';\n\nexport const InputEmail = styled.input.attrs(() => ({\n  type: 'email',\n  name: 'email',\n  autoComplete: 'off',\n  required: true,\n  title: `Example user@mail.com`,\n}))`\n  display: block;\n  margin-top: 5px;\n  border: 2px solid var(--color-gray-200);\n  border-radius: 4px;\n  box-shadow: 0px 4px 4px 0px var(--color-gray-100);\n  background-color: inherit;\n\n  &::placeholder {\n    font-family: inherit;\n    font-size: var(--font-size-500);\n    color: var(--color-white);\n  }\n  &:hover,\n  &:focus {\n    outline: none;\n    border-color: var(--color-blue-200);\n    transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  &:not(:placeholder-shown) {\n    color: var(--color-white);\n  }\n`;\n\nexport const InputPassword = styled.input.attrs(() => ({\n  type: 'password',\n  name: 'password',\n  autoComplete: 'off',\n  required: true,\n}))`\n  display: block;\n  margin-top: 5px;\n  border: 2px solid var(--color-gray-200);\n  border-radius: 4px;\n  box-shadow: 0px 4px 4px 0px var(--color-gray-100);\n  background-color: inherit;\n  &::placeholder {\n    font-family: inherit;\n    font-size: var(--font-size-500);\n    color: var(--color-white);\n  }\n  &:hover,\n  &:focus {\n    outline: none;\n    border-color: var(--color-blue-200);\n    transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  &:not(:placeholder-shown) {\n    color: var(--color-white);\n  }\n`;\n\n","import styled from 'styled-components';\n\nexport const SectionStyled = styled.section`\n  width: 300px;\n  margin: 0 auto;\n  padding-top: 20px;\n  padding-bottom: 20px;\n`;\n\nexport const Title = styled.h2`\n  color: var(--color-blue-300);\n  font-size: var(--font-size-600);\n  margin: 15px auto;\n`;\n","import PropTypes from 'prop-types';\nimport { SectionStyled, Title } from './Section.styles';\n\nexport default function Section({ title, children }) {\n  return (\n    <SectionStyled>\n      {title && <Title>{title}</Title>}\n      {children}\n    </SectionStyled>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n};\n","import { useDispatch } from 'react-redux';\nimport { toast } from 'react-hot-toast';\nimport { register } from '../../redux/auth/operations';\nimport Section from '../Section';\nimport Container from '../Container';\nimport {\n  Form,\n  Label,\n  ButtonSubmit,\n  InputName,\n} from '../ContactForm/ContactForm.styles';\n\nimport {\n  InputEmail,\n  InputPassword\n} from './RegisterForm.styles';\n\n\nexport default function RegisterForm () {\n  const dispatch = useDispatch();\n\n  const handleSubmit = e => {\n    e.preventDefault();\n    const form = e.currentTarget;\n    dispatch(\n      register({\n        name: form.elements.name.value,\n        email: form.elements.email.value,\n        password: form.elements.password.value,\n      })\n    );\n    toast.success('Registration completed!');\n    form.reset();\n  };\n\n  return (\n    <>\n      <Container>\n      <Section title=\"Registration\">\n\n    <Form  onSubmit={handleSubmit} autoComplete=\"off\">\n      <Label>Username\n        <InputName/>\n      </Label>\n      <Label>Email\n        <InputEmail/>\n      </Label>\n      <Label>Password\n        <InputPassword/>\n      </Label>\n        <ButtonSubmit text=\"Register\"></ButtonSubmit>\n          </Form>\n        </Section>\n        </Container>\n      </>\n  );\n};\n\n","import RegisterForm  from '../../components/RegisterForm/RegisterForm';\n\nexport default function RegisterPage() {\n  return (\n    <div>\n      <RegisterForm />\n    </div>\n  );\n}"],"names":["Form","styled","Label","InputName","type","name","autoComplete","required","pattern","title","InputNumber","ButtonSubmit","Button","attrs","InputEmail","InputPassword","SectionStyled","Title","Section","children","RegisterForm","dispatch","useDispatch","Container","onSubmit","e","preventDefault","form","currentTarget","register","elements","value","email","password","toast","reset","text","RegisterPage"],"sourceRoot":""}