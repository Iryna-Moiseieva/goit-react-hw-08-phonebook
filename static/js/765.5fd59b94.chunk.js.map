{"version":3,"file":"static/js/765.5fd59b94.chunk.js","mappings":"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","sources":["components/ContactForm/ContactForm.styles.js","components/Section/Section.styles.js","components/Section/Section.js","redux/contacts/selectors.js","components/ContactForm/ContactForm.js","components/ContactItem/ContactItem.styles.js","components/ContactItem/ContactItem.js","components/ContactList/ContactList.styles.js","components/ContactList/ContactList.js","components/ContactFilter/ContactFilter.styles.js","components/ContactFilter/ContactFilter.js","pages/ContactsPage/ContactsPage.js"],"sourcesContent":["import styled from 'styled-components';\nimport Button from '../Button';\n\nexport const Form = styled.form`\n  width: 450px;\n  display: flex;\n  flex-direction: column;\n  align-items: flex-start;\n  border: 1px solid black;\n  margin: auto;\n  padding: 15px;\n  border-radius: 8px;\n  border-color: var(--color-blue-300);\n`;\n\nexport const Label = styled.label`\n  margin-bottom: 15px;\n  font-weight: 600;\n  font-size: var(--font-size-500);\n  color: var(--color-blue-200);\n`;\n\nexport const InputName = styled.input.attrs(() => ({\n  type: 'text',\n  name: 'name',\n  autoComplete: 'off',\n  required: true,\n  pattern: `^[a-zA-Zа-яА-Я]+(([' -][a-zA-Zа-яА-Я ])?[a-zA-Zа-яА-Я]*)*$`,\n  title: `Name may contain only letters, apostrophe, dash and spaces. For example Adrian, Jacob Mercer, Charles de Batz de Castelmore d'Artagnan`,\n}))`\n  display: block;\n  margin-top: 5px;\n  border: 2px solid var(--color-gray-200);\n  border-radius: 4px;\n  box-shadow: 0px 4px 4px 0px var(--color-gray-100);\n  background-color: inherit;\n\n  &::placeholder {\n    font-family: inherit;\n    font-size: var(--font-size-500);\n    color: var(--color-white);\n  }\n  &:hover,\n  &:focus {\n    outline: none;\n    border-color: var(--color-blue-200);\n    transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  &:not(:placeholder-shown) {\n    color: var(--color-white);\n  }\n`;\n\nexport const InputNumber = styled.input.attrs(() => ({\n  type: 'tel',\n  name: 'number',\n  autoComplete: 'off',\n  required: true,\n  pattern: `\\\\+?\\\\d{1,4}?[-.\\\\s]?\\\\(?\\\\d{1,3}?\\\\)?[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,4}[-.\\\\s]?\\\\d{1,9}`,\n  title: `Phone number must be digits and can contain spaces, dashes, parentheses and can start with +`,\n}))`\n  display: block;\n  margin-top: 5px;\n  border: 2px solid var(--color-gray-200);\n  border-radius: 4px;\n  box-shadow: 0px 4px 4px 0px var(--color-gray-100);\n  background-color: inherit;\n  &::placeholder {\n    font-family: inherit;\n    font-size: var(--font-size-500);\n    color: var(--color-white);\n  }\n  &:hover,\n  &:focus {\n    outline: none;\n    border-color: var(--color-blue-200);\n    transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  &:not(:placeholder-shown) {\n    color: var(--color-white);\n  }\n`;\n\nexport const ButtonSubmit = styled(Button).attrs(() => ({\n  type: 'submit',\n}))`\nfont-size: var(--font-size-400);\n`;\n","import styled from 'styled-components';\n\nexport const SectionStyled = styled.section`\n  width: 300px;\n  margin: 0 auto;\n  padding-top: 20px;\n  padding-bottom: 20px;\n`;\n\nexport const Title = styled.h2`\n  color: var(--color-blue-300);\n  font-size: var(--font-size-600);\n  margin: 15px auto;\n`;\n","import PropTypes from 'prop-types';\nimport { SectionStyled, Title } from './Section.styles';\n\nexport default function Section({ title, children }) {\n  return (\n    <SectionStyled>\n      {title && <Title>{title}</Title>}\n      {children}\n    </SectionStyled>\n  );\n}\n\nSection.propTypes = {\n  title: PropTypes.string,\n  children: PropTypes.oneOfType([\n    PropTypes.arrayOf(PropTypes.node),\n    PropTypes.node,\n  ]).isRequired,\n};\n","export const selectLoading = state => state.contacts.loading;\n\nexport const selectFilter = state => state.contacts.filter;\n\nexport const selectAllContacts = state => state.contacts.items;\n","import { useState } from 'react';\nimport { useSelector, useDispatch } from 'react-redux';\nimport { toast } from 'react-hot-toast';\nimport { addContact } from '../../redux/contacts/operations';\nimport { selectAllContacts} from '../../redux/contacts/selectors';\n\nimport {\n  Form,\n  Label,\n  ButtonSubmit,\n  InputName,\n  InputNumber,\n} from './ContactForm.styles';\n\nexport default function ContactForm() {\n  const [name, setName] = useState('');\n  const [number, setNumber] = useState('');\n\n  const contacts = useSelector(selectAllContacts);\n  const dispatch = useDispatch();\n\n  const handleChangeName = e => setName(e.target.value);\n\n  const handleChangeNumber = e => setNumber(e.target.value);\n\n  const checkContact = name => {\n    const normalizedName = name.toLowerCase();\n    return contacts.find(\n      contact => contact.name.toLowerCase() === normalizedName\n    );\n  };\n\n  const reset = () => {\n    setName('');\n    setNumber('');\n  };\n\n  const handleSubmit =  e => {\n    e.preventDefault();\n    const isContact = checkContact(name);\n\n    if (isContact) {\n      toast.error(`${name} is already in contacts.`);\n      reset();\n      return;\n    }\n\n    dispatch(addContact({ name, number }));\n    toast.success(`${name} was created!`);\n    reset();\n  };\n\n  return (\n    <Form onSubmit={handleSubmit}>\n      <Label>\n        Name\n        <InputName value={name} onChange={handleChangeName} />\n      </Label>\n      <Label>\n        Number\n        <InputNumber value={number} onChange={handleChangeNumber} />\n      </Label>\n      <ButtonSubmit text=\"Add contact\">\n      </ButtonSubmit>\n    </Form>\n  );\n}\n","import styled from 'styled-components';\nimport Button from '../Button';\n\nexport const Container = styled.li`\n  display: flex;\n  align-items: center;\n  justify-content: space-between;\n  font-weight: 500;\n\n  &:not(:last-child) {\n    margin-bottom: 5px;\n  }\n`;\n\nexport const Wrapper = styled.div`\n  display: flex;\n  align-items: center;\n  font-size: var(--font-size-500);\n`;\nexport const IndexNumber = styled.span`\n  margin-right: 5px;\n  color: var(--color-blue-200);\n`;\n\nexport const Name = styled.span`\n  margin-right: 5px;\n  color: var(--color-blue-200);\n`;\n\nexport const Number = styled.span`\n  margin-right: 5px;\n  color: var(--color-gray-300);\n`;\n\nexport const ButtonDelete = styled(Button).attrs(() => ({\n  type: 'button',\n}))`\n  min-width: 100px;\n  font-size: var(--font-size-300);\n`;\n","import { useDispatch } from 'react-redux';\nimport { deleteContact } from '../../redux/contacts/operations';\nimport PropTypes from 'prop-types';\nimport { toast } from 'react-hot-toast';\nimport {\n  ButtonDelete,\n  IndexNumber,\n  Container,\n  Wrapper,\n  Name,\n  Number,\n} from './ContactItem.styles';\n\nexport default function ContactItem({ id, name, number, index }) {\n  const dispatch = useDispatch();\n  const handleDelete = () => {\n    dispatch(deleteContact(id));\n    toast.success(`${name} has been deleted!`);\n  }\n\n\n  return (\n    <Container>\n      <Wrapper>\n      <IndexNumber>{`${index + 1}.`}</IndexNumber>\n      <Name>{name}</Name>\n        <Number>{number}</Number>\n        </Wrapper>\n        <ButtonDelete text=\"Delete\" onClick={handleDelete}>\n      </ButtonDelete>\n    </Container>\n  );\n}\n\nContactItem.propTypes = {\n  id: PropTypes.string.isRequired,\n  name: PropTypes.string.isRequired,\n  number: PropTypes.string.isRequired,\n  index: PropTypes.number.isRequired,\n};\n","import styled from 'styled-components';\n\nexport const Container = styled.ul`\n  margin: 0;\n  padding: 0;\n`;\n","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport { selectAllContacts, selectFilter, selectLoading } from '../../redux/contacts/selectors';\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport ContactItem from 'components/ContactItem';\nimport Loader from '../Loader';\nimport { Container } from './ContactList.styles';\n\nexport default function ContactList() {\nconst dispatch = useDispatch();\n  const contacts = useSelector(selectAllContacts);\n  const filter = useSelector(selectFilter);\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  const getContactsList = () => {\n    const filterValue = (filter || '').toLowerCase().trim();\n    return contacts.filter(contact =>\n      (contact.name || '').toLowerCase().includes(filterValue)\n    );\n  };\n\n\n  return (\n    <Container>\n      {isLoading ? (\n          <Loader />\n        ) : (\n          <>\n            {contacts &&\n              getContactsList().map(({ name, number, id }, index ) => (\n                <ContactItem\n                  key={id}\n                  id={id}\n                  name={name}\n                  number={number}\n                  index={ index }\n                />\n              ))}\n          </>\n        )}\n    </Container>\n  );\n}\n\n","import styled from 'styled-components';\n\nexport const Label = styled.label`\n  display: block;\n  margin-bottom: 10px;\n  font-weight: 600;\n  font-size: var(--font-size-500);\n  color: var(--color-gray-300);\n`;\n\nexport const FilterInput = styled.input.attrs(() => ({\n  type: 'text',\n  name: 'filter',\n  autoComplete: 'off',\n}))`\n  display: block;\n  margin-top: 5px;\n  border: 2px solid var(--color-gray-200);\n  border-radius: 4px;\n  box-shadow: 0px 4px 4px 0px var(--color-gray-100);\n  background-color: inherit;\n  &::placeholder {\n    font-family: inherit;\n    font-size: var(--font-size-500);\n    color: var(--color-gray-200);\n  }\n  &:hover,\n  &:focus {\n    outline: none;\n    border-color: var(--color-blue-200);\n    transition: border-color 250ms cubic-bezier(0.4, 0, 0.2, 1);\n  }\n  &:not(:placeholder-shown) {\n    color: var(--color-gray-200);\n  }\n`;\n","import { useDispatch } from 'react-redux';\nimport { addFilter } from '../../redux/contacts/slice';\nimport { Label, FilterInput } from './ContactFilter.styles';\n\nexport default function Filter() {\n  const dispatch = useDispatch();\n\n  const onChange = e => {\n    dispatch(addFilter(e.target.value));\n  };\n\n  return (\n    <Label>\n      Find contacts by name\n      <FilterInput onChange={onChange} />\n    </Label>\n  );\n}","import { useEffect } from 'react';\nimport { useDispatch, useSelector } from 'react-redux';\n\nimport ContactForm from '../../components/ContactForm';\nimport ContactList from '../../components/ContactList';\nimport Section from 'components/Section';\nimport Loader from '../../components/Loader'\nimport Container from '../../components/Container';\nimport ContactFilter from '../../components/ContactFilter';\n\nimport { fetchContacts } from '../../redux/contacts/operations';\nimport { selectLoading } from '../../redux/contacts/selectors';\n\nexport default function ContactsPage() {\n  const dispatch = useDispatch();\n  const isLoading = useSelector(selectLoading);\n\n  useEffect(() => {\n    dispatch(fetchContacts());\n  }, [dispatch]);\n\n  return (\n    <Container>\n      <Section title=\"Phonebook\">\n        <ContactForm />\n      </Section>\n      <div>{isLoading && <Loader/>}</div>\n      <Section title=\"Contacts\">\n        <ContactFilter />\n        <ContactList />\n      </Section>\n    </Container>\n  );\n}"],"names":["Form","styled","Label","InputName","type","name","autoComplete","required","pattern","title","InputNumber","ButtonSubmit","Button","attrs","SectionStyled","Title","Section","children","selectLoading","state","contacts","loading","selectFilter","filter","selectAllContacts","items","ContactForm","useState","setName","number","setNumber","useSelector","dispatch","useDispatch","reset","onSubmit","e","preventDefault","isContact","normalizedName","toLowerCase","find","contact","checkContact","toast","addContact","value","onChange","target","text","Container","Wrapper","IndexNumber","Name","Number","ButtonDelete","ContactItem","id","index","onClick","deleteContact","ContactList","isLoading","useEffect","fetchContacts","Loader","filterValue","trim","includes","getContactsList","map","FilterInput","Filter","addFilter","ContactsPage"],"sourceRoot":""}